#!/usr/bin/env python
# -*- encoding: utf-8; py-indent-offset: 4 -*-



import getopt, sys, socket, urllib2, traceback, re, pprint
import argparse
import xml.etree.ElementTree as ET
import hashlib

def parse_args():
    parser = argparse.ArgumentParser(description='Check_MK Fritz!Box Smarthome Agent')
    parser.add_argument('host', help='Host name or IP address of your Fritz!Box')

    parser.add_argument('--debug', action='store_true', default=False,
        help='Debug mode: let Python exceptions come through')

    parser.add_argument('--username', nargs='?')
    parser.add_argument('--password', nargs='?')
    parser.add_argument('--port', nargs='?', type=int, default=80)
    parser.add_argument('--protocol', nargs='?', choices=['http', 'https'], default='http')
    args = parser.parse_args()

    return args

def check_fritzbox_smarthome(debug, hostname, username, password, port, protocol):
    base_address = '%s://%s:%d' % (protocol, hostname, port)

    # CALL /login_sid.lua
    # and grab challenge
    response = urllib2.urlopen(base_address + '/login_sid.lua')
    if args.password:
        xml_login = ET.fromstring(response.read())
        challenge = xml_login.find('Challenge').text

        # create challenge_response (hash with md5: '<challenge>-<password>')
        digest = hashlib.md5()
        digest.update(challenge.encode('utf-16le'))
        digest.update('-'.encode('utf-16le'))
        digest.update(password.encode('utf-16le'))

        challenge_response = challenge + '-' + digest.hexdigest()

        # CALL /login_sid.lua?username=<username>&response=<challenge_response>
        # and grab sessionid
        if args.username:
            response = urllib2.urlopen(base_address + '/login_sid.lua?username=%s&response=%s' % (username, challenge_response))
        else:
            response = urllib2.urlopen(base_address + '/login_sid.lua?response=%s' % (challenge_response))
    xml_login_solve = ET.fromstring(response.read())
    sessionid = xml_login_solve.find('SID').text

    # Write check header
    sys.stdout.write('<<<fritzbox_smarthome>>>\n')

    # CALL /webservices/homeautoswitch.lua?switchcmd=getdevicelistinfos&sid=<SID>
    # and convert response to check output
    response = urllib2.urlopen(base_address + '/webservices/homeautoswitch.lua?switchcmd=getdevicelistinfos&sid=%s' % (sessionid))
    response_read = response.read()
    if debug:
        sys.stdout.write('Raw XML:\n')
        sys.stdout.write(response_read)

    xml_devicelist = ET.fromstring(response_read)
    for device in xml_devicelist.findall('device'):
        sys.stdout.write('id=%s\n' % device.get('id'))
        sys.stdout.write('base|functionbitmask=%s\n' % device.get('functionbitmask'))
        sys.stdout.write('base|fwversion=%s\n' % device.get('fwversion'))
        sys.stdout.write('base|identifier=%s\n' % device.get('identifier').replace(' ',''))
        sys.stdout.write('base|manufacturer=%s\n' % device.get('manufacturer'))
        sys.stdout.write('base|productname=%s\n' % device.get('productname').replace(' ',''))
        sys.stdout.write('base|present=%s\n' % device.find('present').text)
        sys.stdout.write('base|name=%s\n' % device.find('name').text.encode('ascii','ignore'))

        for subelement in device.findall('*'):
            if subelement.tag == 'name':
                continue
            if subelement.tag == 'present':
                continue
            for detailelement in subelement.findall('*'):
                sys.stdout.write('%s|%s=%s\n' % (subelement.tag, detailelement.tag, detailelement.text))

if __name__ == '__main__':
    args = parse_args()
    try:
        check_fritzbox_smarthome(args.debug, args.host, args.username,
            args.password, args.port, args.protocol)
    except:
        if args.debug:
            raise
        sys.stderr.write('Unhandled error: %s' % traceback.format_exc())
